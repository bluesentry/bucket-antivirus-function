FROM amazonlinux:2

# Set up working directories
RUN mkdir -p /opt/app
RUN mkdir -p /opt/app/build
RUN mkdir -p /opt/app/bin/

# Copy in the lambda source
WORKDIR /opt/app
COPY ./*.py /opt/app/
COPY requirements.txt /opt/app/requirements.txt

# Install packages
RUN yum update -y && \
    yum groupinstall -y "Development Tools" && \
    yum install -y yum-utils cpio zip unzip less wget && \
    yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

# Install amazon-linux-extras in order to install python3.8
RUN yum install -y amazon-linux-extras && \
    amazon-linux-extras enable python3.8 && \
    yum -y install python3.8 && \
    python3.8 -m pip install -r requirements.txt && \
    # This had --no-cache-dir, tracing through multiple tickets led to a problem in wheel
    rm -rf /root/.cache/pip && \
    python3.8 -m pip install -U pytest

# Install additional packages for local compilation of cmake and clamav for aarch64
RUN yum install -y gcc gcc-c++ make valgrind openssl-devel \
     libxml2 bzip2-devel json-c-devel libffi-devel \
     check-devel  libxml2-devel libxslt-devel pcre2-devel \
     zlib-devel libcurl-devel ncurses-devel sendmail-devel


# Download libraries we need to run in lambda with python3.8
WORKDIR /tmp
RUN yumdownloader -x \*i686 --archlist=aarch64 \
          json-c pcre2 libprelude gnutls libtasn1 lib64nettle nettle \
          bzip2-libs libtool-ltdl libxml2 xz-libs \
          # Additional packages \
          libgpg-error libcurl libnghttp2 libidn2

RUN \
  rpm2cpio json-c*.rpm | cpio -idmv && \
  rpm2cpio pcre*.rpm | cpio -idmv && \
  rpm2cpio gnutls* | cpio -idmv && \
  rpm2cpio nettle* | cpio -idmv && \
  rpm2cpio lib* | cpio -idmv && \
  rpm2cpio *.rpm | cpio -idmv && \
  rpm2cpio libtasn1* | cpio -idmv && \
  rpm2cpio bzip2-libs*.rpm | cpio -idmv && \
  rpm2cpio libtool-ltdl*.rpm | cpio -idmv && \
  rpm2cpio libxml2*.rpm | cpio -idmv && \
  rpm2cpio xz-libs*.rpm | cpio -idmv && \
  # Additional packages \
  rpm2cpio libgpg-error*.rpm | cpio -idmv && \
  rpm2cpio libcurl*.rpm | cpio -idmv && \
  rpm2cpio libnghttp2*.rpm | cpio -idmv && \
  rpm2cpio libidn2*.rpm | cpio -idmv

RUN cp /tmp/usr/lib64/* \
       # libcrypt* extracts into /tmp/lib64 and not /tmp/usr/lib64 \
       /tmp/lib64/*  \
       # Copy over other additional dependencies \
       /usr/lib64/libldap-2.4* \
       /usr/lib64/libssh2* \
       /usr/lib64/liblber* \
       /usr/lib64/libsmime3* \
       /usr/lib64/libunistring* \
       /usr/lib64/libsasl2* \
       /usr/lib64/libssl* \
       /usr/lib64/libssl* \
       /usr/lib64/libnss3* \
       /usr/lib64/libgssapi* \
       /usr/lib64/libkrb5* \
       /usr/lib64/libk5crypto* \
       /usr/lib64/libkrb5support* \
       /usr/lib64/libkeyutils*  \
       /usr/lib64/libpl* \
       /usr/lib64/libnspr* \
       /usr/lib64/libdl* \
       /usr/lib64/libresolv* \
       /usr/lib64/libnssutil* \
       /usr/lib64/libcrypt* \
       /opt/app/bin

# Build cmake v3.21 locally as the version available is not compatible for building clamav 0.104+
WORKDIR /tmp
RUN wget https://github.com/Kitware/CMake/releases/download/v3.21.2/cmake-3.21.2-linux-aarch64.sh && \
  yum remove cmake && \
  echo 'y' | sh cmake-3.21.2-linux-aarch64.sh && \
  cp cmake-3.21*/bin/c* /usr/local/bin/ && \
  cp -r cmake-3.21*/share/* /usr/local/share/

# Build clamav v0.104 locally using cmake
WORKDIR /tmp
RUN wget https://www.clamav.net/downloads/production/clamav-0.104.0.tar.gz && \
    gunzip clamav-0.*tar.gz && \
    tar xvf clamav-0.*tar && \
    cd clamav* && \
    mkdir build && \
    cd build && \
    cmake .. \
      -D CMAKE_INSTALL_PREFIX=/usr \
      -D CMAKE_INSTALL_LIBDIR=lib \
      -D APP_CONFIG_DIRECTORY=/etc/clamav \
      -D DATABASE_DIRECTORY=/var/lib/clamav \
      -D ENABLE_JSON_SHARED=ON && \
    cmake --build . && \
    cmake --build . --target install && \
    echo "Done building clamav"

# Copy over the binaries and libraries
RUN cp /usr/bin/clamscan \
       /usr/bin/freshclam \
       /usr/lib/*clam* \
       /opt/app/bin


# Fix the freshclam.conf settings
RUN echo "DatabaseMirror database.clamav.net" > /opt/app/bin/freshclam.conf && \
    echo "CompressLocalDatabase yes" >> /opt/app/bin/freshclam.conf

# Create the zip file
WORKDIR /opt/app
RUN zip -r9 --exclude="*test*" /opt/app/build/lambda.zip *.py bin

# Change path to Python 3.8
WORKDIR /usr/local/lib/python3.8/site-packages
RUN zip -r9 /opt/app/build/lambda.zip *

WORKDIR /opt/app
